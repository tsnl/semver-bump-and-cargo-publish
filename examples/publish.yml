name: Publish

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to publish from"
        required: true
        default: "main"
        type: string
      bump_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: "Dry run: skip automated commit, push, and publish"
        required: false
        default: true
        type: boolean

# Grant permissions for GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: read

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Publish crate using semver-bump-and-cargo-publish
        id: publish
        uses: your-username/semver-bump-and-cargo-publish@v1
        with:
          branch: ${{ github.event.inputs.branch }}
          bump_type: ${{ github.event.inputs.bump_type }}
          dry_run: ${{ github.event.inputs.dry_run }}
          cargo_registry_token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          pat_token: ${{ secrets.PAT_TOKEN }}
          # Wait for CI checks to pass before publishing
          # Format: "workflow_name / job_name" (exactly as shown in GitHub UI)
          # Example for workflows with jobs named "test", "lint", "check-formatting":
          wait_for_checks: "CI / Test, CI / Lint, CI / Check Formatting"
          # Alternative format if using different workflow/job names:
          # wait_for_checks: "Test / test, Lint / clippy, Format / rustfmt"
          check_wait_interval: "60"
          check_timeout_count: "20"
          # Customize Rust toolchain if needed
          rust_toolchain: "stable"
          # Customize git user for commits
          git_user_email: "bot@yourcompany.com"
          git_user_name: "Release Bot"

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run != 'true' && steps.publish.outputs.published == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.publish.outputs.tag_name }}
          release_name: Release ${{ steps.publish.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.publish.outputs.new_version }}

            Published package: ${{ steps.publish.outputs.package_name }}
            Previous version: ${{ steps.publish.outputs.old_version }}
            New version: ${{ steps.publish.outputs.new_version }}

            View on [crates.io](https://crates.io/crates/${{ steps.publish.outputs.package_name }})
          draft: false
          prerelease: false

      - name: Output summary
        run: |
          echo "## ðŸ“¦ Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ steps.publish.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.publish.outputs.old_version }} â†’ ${{ steps.publish.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.publish.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Published to crates.io**: ${{ steps.publish.outputs.published }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY

          # Troubleshooting tips
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ’¡ Troubleshooting Status Checks" >> $GITHUB_STEP_SUMMARY
          echo "If status checks fail to be found:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the exact names in your repository's commit status UI" >> $GITHUB_STEP_SUMMARY
          echo "2. Format should be: \`workflow_name / job_name\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Names are case-sensitive and must match exactly" >> $GITHUB_STEP_SUMMARY
          echo "4. For external CI (non-GitHub Actions), use the context name as shown" >> $GITHUB_STEP_SUMMARY
